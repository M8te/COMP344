-- MySQL Script generated by MySQL Workbench
-- 10/22/17 20:46:57
-- Model: Online Store Schema    Version: 3.5

-- Model online store schema for use in COMP344, "E-Commerce Technologies"

-- MySQL Workbench Forward Engineering

/* SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0; */
/* SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0; */
/* SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES'; */

-- -----------------------------------------------------
-- Schema store
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Table `Product`
-- -----------------------------------------------------
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE Product';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/ 

CREATE TABLE Product (
  prod_id NUMBER(10) NOT NULL,
  prod_name VARCHAR2(40) NOT NULL,
  prod_desc VARCHAR2(128) DEFAULT NULL NULL,
  prod_img_url VARCHAR2(128) DEFAULT NULL NULL,
  prod_long_desc VARCHAR2(256) DEFAULT NULL NULL,
  prod_sku CHAR(16) DEFAULT NULL NULL,
  prod_disp_cmd VARCHAR2(128) DEFAULT NULL NULL,
  prod_weight NUMBER(6,2) NULL,
  prod_l NUMBER(10) NULL,
  prod_w NUMBER(10) NULL,
  prod_h NUMBER(10) NULL,
  
  PRIMARY KEY (prod_id)
 );
/
COMMENT ON TABLE Product IS 'Key product information.'
/
-- Generate ID using sequence and trigger
CREATE SEQUENCE Product_seq START WITH 8 INCREMENT BY 1;
/
CREATE OR REPLACE TRIGGER Product_seq_tr
 BEFORE INSERT ON Product FOR EACH ROW
 WHEN (NEW.prod_id IS NULL)
BEGIN
 SELECT Product_seq.NEXTVAL INTO :NEW.prod_id FROM DUAL;
END;
/

CREATE INDEX prod_name ON Product (prod_name ASC);
/

-- -----------------------------------------------------
-- Table `Attribute`
-- -----------------------------------------------------
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE Attribute';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/ 

CREATE TABLE Attribute (
  id NUMBER(10) NOT NULL,
  name VARCHAR2(45) DEFAULT NULL NULL,
  Product_prod_id NUMBER(10) NOT NULL,

  PRIMARY KEY (id),
  
  CONSTRAINT fk_product_id
    FOREIGN KEY (Product_prod_id)
    REFERENCES Product (prod_id)
   );
/
COMMENT ON TABLE Attribute IS 'Product attribute name and type information'
/
-- Generate ID using sequence and trigger
CREATE SEQUENCE Attribute_seq START WITH 5 INCREMENT BY 1;
/
CREATE OR REPLACE TRIGGER Attribute_seq_tr
 BEFORE INSERT ON Attribute FOR EACH ROW
 WHEN (NEW.id IS NULL)
BEGIN
 SELECT Attribute_seq.NEXTVAL INTO :NEW.id FROM DUAL;
END;
/

CREATE INDEX fk_Attribute_Product1_idx ON Attribute (Product_prod_id ASC);
/

-- -----------------------------------------------------
-- Table `AttributeValue`
-- -----------------------------------------------------
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE AttributeValue';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/ 

CREATE TABLE AttributeValue (
  AttrVal_id NUMBER(10) NOT NULL,
  AttrVal_Value VARCHAR2(45) NOT NULL,
  AttrVal_Attr_id NUMBER(10) NOT NULL,
  AttrVal_Prod_id NUMBER(10) NOT NULL,
  AttrVal_Price NUMBER(10,2) NULL,
  
  PRIMARY KEY (AttrVal_id),

  CONSTRAINT fk_Attr_Id
    FOREIGN KEY (AttrVal_Attr_id)
    REFERENCES Attribute (id),
    
  CONSTRAINT fk_Prod_id
    FOREIGN KEY (AttrVal_Prod_id)
    REFERENCES Product (prod_id)
   );
/
COMMENT ON TABLE AttributeValue IS 'Product attribute value information.'
/
-- Generate ID using sequence and trigger
CREATE SEQUENCE AttributeValue_seq START WITH 1 INCREMENT BY 1;
/
CREATE OR REPLACE TRIGGER AttributeValue_seq_tr
 BEFORE INSERT ON AttributeValue FOR EACH ROW
 WHEN (NEW.AttrVal_id IS NULL)
BEGIN
 SELECT AttributeValue_seq.NEXTVAL INTO :NEW.AttrVal_id FROM DUAL;
END;
/

CREATE INDEX fk_AV_Attribute_idx ON AttributeValue (AttrVal_Attr_id ASC); --Field shortened due to length restrictions
CREATE INDEX fk_Prod_id_idx ON AttributeValue (AttrVal_Prod_id ASC);
/

-- -----------------------------------------------------
-- Table `ShopperGroup`
-- -----------------------------------------------------
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE ShopperGroup';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/ 

CREATE TABLE ShopperGroup (
  ShopGrp_id NUMBER(10) NOT NULL,
  ShopGrp_Name VARCHAR2(45) NOT NULL,
  ShopGrp_Description VARCHAR2(256) NULL,
  
  PRIMARY KEY (ShopGrp_id)
  );
/

-- -----------------------------------------------------
-- Table `Shopper`
-- -----------------------------------------------------
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE Shopper';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/ 

CREATE TABLE Shopper (
  shopper_id NUMBER(10) NOT NULL,
  sh_username VARCHAR2(30) NOT NULL,
  sh_password CHAR(60) NOT NULL,
  sh_email VARCHAR2(64) NOT NULL,
  sh_phone VARCHAR2(45) DEFAULT NULL NULL,
  sh_type CHAR(1) NOT NULL,
  sh_shopgrp NUMBER(10) NOT NULL,
  sh_field1 VARCHAR2(128) DEFAULT NULL NULL,
  sh_field2 VARCHAR2(128) DEFAULT NULL NULL,
  sh_primaryAddressFK NUMBER(10) NOT NULL,
  
  PRIMARY KEY (shopper_id),
  
  CONSTRAINT fk_Shopper_ShopperGroup1
    FOREIGN KEY (sh_shopgrp)
    REFERENCES ShopperGroup (ShopGrp_id)
   );
/
COMMENT ON TABLE Shopper IS 'Information about a registered shopper and or user.'
/
-- Generate ID using sequence and trigger
CREATE SEQUENCE Shopper_seq START WITH 8 INCREMENT BY 1;
/
CREATE OR REPLACE TRIGGER Shopper_seq_tr
 BEFORE INSERT ON Shopper FOR EACH ROW
 WHEN (NEW.shopper_id IS NULL)
BEGIN
 SELECT Shopper_seq.NEXTVAL INTO :NEW.shopper_id FROM DUAL;
END;
/

CREATE INDEX sh_username ON Shopper (sh_username ASC);
CREATE INDEX fk_Shopper_ShopperGroup1_idx ON Shopper (sh_shopgrp ASC);
/

-- -----------------------------------------------------
-- Table `Shaddr`
-- -----------------------------------------------------
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE Shaddr';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/ 

CREATE TABLE Shaddr (
  shaddr_id NUMBER(10) NOT NULL,
  shopper_id NUMBER(10) NOT NULL,
  sh_title CHAR(8) DEFAULT NULL NULL,
  sh_firstname VARCHAR2(20) DEFAULT NULL NULL,
  sh_familyname VARCHAR2(30) DEFAULT NULL NULL,
  sh_street1 VARCHAR2(64) DEFAULT NULL NULL,
  sh_street2 VARCHAR2(64) DEFAULT NULL NULL,
  sh_city VARCHAR2(32) DEFAULT NULL NULL,
  sh_state VARCHAR2(8) DEFAULT NULL NULL,
  sh_postcode VARCHAR2(10) DEFAULT NULL NULL,
  sh_country VARCHAR2(32) DEFAULT NULL NULL,
  
  PRIMARY KEY (shaddr_id) ,
  
  CONSTRAINT fk_shopper_id
    FOREIGN KEY (shopper_id)
    REFERENCES Shopper (shopper_id)
   );
/
COMMENT ON TABLE Shaddr IS 'A shopper can have multiple shipping or other addresses.'
/
-- Generate ID using sequence and trigger
CREATE SEQUENCE Shaddr_seq START WITH 8 INCREMENT BY 1;
/
CREATE OR REPLACE TRIGGER Shaddr_seq_tr
 BEFORE INSERT ON Shaddr FOR EACH ROW
 WHEN (NEW.shaddr_id IS NULL)
BEGIN
 SELECT Shaddr_seq.NEXTVAL INTO :NEW.shaddr_id FROM DUAL;
END;
/

CREATE INDEX shopper_id ON Shaddr (shopper_id ASC);
/

-- -----------------------------------------------------
-- Table `Order`
-- -----------------------------------------------------
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE "Order"';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/ 

CREATE TABLE "Order" (
  Order_id NUMBER(10) NOT NULL,
  Order_Shopper NUMBER(10) NOT NULL,
  Order_Shaddr NUMBER(10) NOT NULL,
  Order_TimeStamp TIMESTAMP(0) NULL,
  Order_PayMethod CHAR NULL,
  Order_Payment_PAN VARCHAR2(20) NULL,
  Order_PAN_Exp_Month NUMBER(5) NULL,
  Order_PAN_Exp_Year NUMBER(5) NULL,
  Order_PaymentAuthorized NUMBER(3) NULL,
  Order_Picked NUMBER(3) NULL,
  Order_Shipped NUMBER(3) NULL,
  Order_ShipDate DATE NULL,
  Order_Paid NUMBER(3) NULL,
  Order_PayDate DATE NULL,
  Order_ShippingAmount NUMBER(10,2) NULL,
  Order_TaxAmount NUMBER(10,2) NULL,
  Order_ProductAmount NUMBER(10,2) NULL,
  Order_Total NUMBER(10,2) NULL,
  
  PRIMARY KEY (Order_id),
  
  CONSTRAINT fk_Shopper
    FOREIGN KEY (Order_Shopper)
    REFERENCES Shopper (shopper_id),
    
  CONSTRAINT fk_Order_Shaddr
    FOREIGN KEY (Order_Shaddr)
    REFERENCES Shaddr (shaddr_id)
   );
/
-- Generate ID using sequence and trigger
CREATE SEQUENCE Order_seq START WITH 1 INCREMENT BY 1;
/
CREATE OR REPLACE TRIGGER Order_seq_tr
 BEFORE INSERT ON "Order" FOR EACH ROW
 WHEN (NEW.Order_id IS NULL)
BEGIN
 SELECT Order_seq.NEXTVAL INTO :NEW.Order_id FROM DUAL;
END;
/

CREATE INDEX fk_Shopper_idx ON "Order" (Order_Shopper ASC);
CREATE INDEX fk_Order_Shaddr_idx ON "Order" (Order_Shaddr ASC);
/

-- -----------------------------------------------------
-- Table `OrderProduct`
-- -----------------------------------------------------
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE OrderProduct';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/ 

CREATE TABLE OrderProduct (
  OP_id NUMBER(10) NOT NULL,
  OP_Order_id NUMBER(10) NOT NULL,
  OP_prod_id NUMBER(10) NOT NULL,
  OP_qty NUMBER(10) NULL,
  
  PRIMARY KEY (OP_id),
  
  CONSTRAINT fk_OP_Product
    FOREIGN KEY (OP_prod_id)
    REFERENCES Product (prod_id),
    
  CONSTRAINT fk_OrderProduct_Order1
    FOREIGN KEY (OP_Order_id)
    REFERENCES "Order" (Order_id)
   );
/
-- Generate ID using sequence and trigger
CREATE SEQUENCE OrderProduct_seq START WITH 1 INCREMENT BY 1;
/
CREATE OR REPLACE TRIGGER OrderProduct_seq_tr
 BEFORE INSERT ON OrderProduct FOR EACH ROW
 WHEN (NEW.OP_id IS NULL)
BEGIN
 SELECT OrderProduct_seq.NEXTVAL INTO :NEW.OP_id FROM DUAL;
END;
/

CREATE INDEX fk_O_has_P_P1_idx ON OrderProduct (OP_prod_id ASC);
CREATE INDEX fk_OrderProduct_Order1_idx ON OrderProduct (OP_Order_id ASC);
/

-- -----------------------------------------------------
-- Table `OrderProductAttributeValues`
-- -----------------------------------------------------
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE OrderProductAttributeValues';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/ 

-- Shortened many of the metadata identifiers as too long
-- O = order, p = product, AV = Attribute Values
CREATE TABLE OrderProductAttributeValues (
  OPAttr_id NUMBER(10) CHECK (OPAttr_id > 0) NOT NULL,
  OPAttr_op_id NUMBER(10) NOT NULL,
  OPAttr_Attr_id NUMBER(10) NOT NULL,
  OPAttr_AttrVal_id NUMBER(10) NOT NULL,
  
  PRIMARY KEY (OPAttr_id, OPAttr_op_id),
  
  CONSTRAINT fk_O_has_P_has_AV_O_has_P1
    FOREIGN KEY (OPAttr_op_id)
    REFERENCES OrderProduct (OP_id),
    
  CONSTRAINT fk_O_has_P_has_AV_AV1
    FOREIGN KEY (OPAttr_AttrVal_id)
    REFERENCES AttributeValue (AttrVal_id),
    
  CONSTRAINT fk_OPAV_Attribute1
    FOREIGN KEY (OPAttr_op_id)
    REFERENCES Attribute (id)
   );
/
-- Generate ID using sequence and trigger
CREATE SEQUENCE OPAV_seq START WITH 1 INCREMENT BY 1;
/
CREATE OR REPLACE TRIGGER OPAV_seq_tr
 BEFORE INSERT ON OrderProductAttributeValues FOR EACH ROW
 WHEN (NEW.OPAttr_id IS NULL)
BEGIN
 SELECT OPAV_seq.NEXTVAL INTO :NEW.OPAttr_id FROM DUAL;
END;
/

CREATE INDEX fk_O_has_P_has_AV_AV1_idx ON OrderProductAttributeValues (OPAttr_AttrVal_id ASC);
CREATE INDEX fk_O_has_P_has_AV_O_has_P1_idx ON OrderProductAttributeValues (OPAttr_op_id ASC);
/

-- -----------------------------------------------------
-- Table `Session`
-- -----------------------------------------------------
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE "Session"';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/ 

CREATE TABLE "Session" (
  id CHAR(32) NOT NULL,
  Shopper_id NUMBER(10) NULL,
  data BLOB NULL,
  time TIMESTAMP(0) NOT NULL,
  
  PRIMARY KEY (id),
  
  CONSTRAINT fk_sess_shopper_id
    FOREIGN KEY (Shopper_id)
    REFERENCES Shopper (shopper_id)
   );
/
CREATE INDEX idx_t ON "Session" (time ASC);
/

-- -----------------------------------------------------
-- Table `Stock`
-- -----------------------------------------------------
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE Stock';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/ 

CREATE TABLE Stock (
  id NUMBER(10) NOT NULL,
  Stock_Prod_id NUMBER(10) NULL,
  Stock_Prod_AttrValue_id NUMBER(10) NULL,
  Stock_Qty NUMBER(10) NULL,
  Stock_SKU VARCHAR2(60) NULL,
  Stock_Location VARCHAR2(60) NULL,
  
  PRIMARY KEY (id),
  
  CONSTRAINT fk_Stock_Prod_id
    FOREIGN KEY (Stock_Prod_id)
    REFERENCES Product (prod_id)
   );
/
CREATE INDEX fk_Stock_Prod_id_idx ON Stock (Stock_Prod_id ASC);
CREATE INDEX fk_Stock_ProdAttrValue_id_idx ON Stock (Stock_Prod_AttrValue_id ASC);
/

-- -----------------------------------------------------
-- Table `ProdPrices`
-- -----------------------------------------------------
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE ProdPrices';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/ 

CREATE TABLE ProdPrices (
  PrPr_id NUMBER(10) NOT NULL,
  PrPr_Prod_id NUMBER(10) NOT NULL,
  PrPr_ShopGrp NUMBER(10) NOT NULL,
  PrPr_Price NUMBER(10,2) NULL,
  
  PRIMARY KEY (PrPr_id),
  
  CONSTRAINT fk_ProdPrices_Product1
    FOREIGN KEY (PrPr_Prod_id)
    REFERENCES Product (prod_id),
    
  CONSTRAINT PrPr_ShopGrp
    FOREIGN KEY (PrPr_ShopGrp)
    REFERENCES ShopperGroup (ShopGrp_id)
   );
/
-- Generate ID using sequence and trigger
CREATE SEQUENCE ProdPrices_seq START WITH 1 INCREMENT BY 1;
/
CREATE OR REPLACE TRIGGER ProdPrices_seq_tr
 BEFORE INSERT ON ProdPrices FOR EACH ROW
 WHEN (NEW.PrPr_id IS NULL)
BEGIN
 SELECT ProdPrices_seq.NEXTVAL INTO :NEW.PrPr_id FROM DUAL;
END;
/

CREATE INDEX fk_ProdPrices_Product1_idx ON ProdPrices (PrPr_Prod_id ASC);
CREATE INDEX fk_Prod_ShGrp ON ProdPrices (PrPr_Prod_id ASC, PrPr_ShopGrp ASC);
CREATE INDEX PrPr_ShopGrp_idx ON ProdPrices (PrPr_ShopGrp ASC);
/

-- -----------------------------------------------------
-- Table `Specials`
-- -----------------------------------------------------
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE Specials';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/ 

CREATE TABLE Specials (
  id NUMBER(10) NOT NULL,
  Special_Product_id NUMBER(10) NOT NULL,
  Special_ProdAttrVal NUMBER(10) NULL,
  Special_ProdPrices_id NUMBER(10) NULL,
  Special_Start_Date DATE NOT NULL,
  Special_End_Date DATE NOT NULL,
  Special_Comment VARCHAR2(255) NULL,
  
  PRIMARY KEY (id),
  
  CONSTRAINT fk_Specials_Prod_id
    FOREIGN KEY (Special_Product_id)
    REFERENCES Product (prod_id),
    
  CONSTRAINT fk_Specials_ProdAttrVal_id
    FOREIGN KEY (Special_ProdAttrVal)
    REFERENCES AttributeValue (AttrVal_id),
    
  CONSTRAINT fk_Specials_ProdPrices1
    FOREIGN KEY (Special_ProdPrices_id)
    REFERENCES ProdPrices (PrPr_id)
   );
/
CREATE INDEX fk_Specials_Prod_id_idx ON Specials (Special_Product_id ASC);
CREATE INDEX fk_Specials_ProdAttrVal_id_idx ON Specials (Special_ProdAttrVal ASC);
CREATE INDEX fk_Specials_ProdPrices1_idx ON Specials (Special_ProdPrices_id ASC);
/
